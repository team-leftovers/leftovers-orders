Index: src/main/java/com/leftovers/order/address/controller/addressController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/address/controller/addressController.java b/src/main/java/com/leftovers/order/address/controller/addressController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/address/controller/addressController.java	
+++ /dev/null	
@@ -1,154 +0,0 @@
-package com.leftovers.order.address.controller;
-
-
-import com.leftovers.order.address.model.address;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.*;
-
-//import com.leftovers.order.address.service.addressService;
-
-import java.util.List;
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/address")
-public class addressController {
-
-    @Autowired
-    com.leftovers.order.address.service.addressService addressService;
-
-
-    @RequestMapping
-    public String IsItWorking() {
-        return "Address is working!";
-    }
-
-    @GetMapping(path = "/AddPredefined")
-    public String AddPredefined()
-    {
-       /* address newAddress = new address();
-        newAddress.setId(6);
-        newAddress.setLatitude(4523);
-        newAddress.setLongitude(0.01);
-        newAddress.setZipCode(01256);
-        newAddress.setCountry("Narnia");
-        newAddress.setStreetAddress("lamppost");
-        newAddress.setHouseNumber("HOUS7");
-        newAddress.setUnitNumber("UN077");
-        addressService.addAddress(newAddress);*/
-        return "Complete?";
-    }
-
-
-
-    @GetMapping(path = "/all")
-    public List<address> getAll() {
-        return addressService.getAll();
-    }
-
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addAddress(@RequestParam address newAddress) {
-        System.out.println(newAddress.getName());
-        if (addressService.addAddress(newAddress))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<address> getAddressById(@PathVariable Integer id) {
-        return addressService.getAddressById(id);
-    }
-    @RequestMapping(path = "/showid/{id}" , method = RequestMethod.GET)
-    public String showId(@PathVariable Integer id) {
-        Optional<address> newAddress = addressService.getAddressById(id);
-        if(newAddress.isEmpty())
-        {
-            return "null";
-        }
-        return newAddress.get().toString();
-    }
-    @RequestMapping(path = "/read/{id}" , method = RequestMethod.GET)
-    public String readFromId(@PathVariable Integer id)
-    {
-        try {
-            return addressService.readFromId(id);
-
-        }
-        catch(Exception e)
-        {
-            return "At controller";
-        }
-    }
-    /*
-    public String getAddressById(@PathVariable Integer id) {
-        return addressService.getAddressById(id).get().toString();
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<address> getFoodByName(@PathVariable String name) {
-        return addressService.getAddressByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateAddressName(@PathVariable Integer id , @RequestParam String name ) {
-        if (addressService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      addresss don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (addressService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  addresss don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  addresss don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/account/model/account.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/account/model/account.java b/src/main/java/com/leftovers/order/account/model/account.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/account/model/account.java	
+++ /dev/null	
@@ -1,97 +0,0 @@
-package com.leftovers.order.account.model;
-
-
-import com.leftovers.order.driver.model.driver;
-//import com.leftovers.order.order.model.order;
-import com.leftovers.order.restaurant.model.restaurant;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name="account")
-public class account {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    @Column(name = "first_name")
-    public String firstName;
-
-    @Column(name = "last_name")
-    public String lastName;
-
-    @Column(name = "email")
-    public int email;
-
-    @Column(name = "phone_no")
-    public String phoneNo;
-
-    @Column(name = "hashed_password")
-    public String hashedPassword;
-
-    @Column(name = "type")
-    public int type;
-
-    /*
-    @OneToOne(mappedBy = "accountId")
-    public driver Driver;
-
-    @OneToOne(mappedBy = "customerId")
-    public order Order;
-*/
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getFirstName() {
-        return firstName;
-    }
-
-    public void setFirstName(String firstName) {
-        this.firstName = firstName;
-    }
-
-    public String getLastName() {
-        return lastName;
-    }
-
-    public void setLastName(String lastName) {
-        this.lastName = lastName;
-    }
-
-    public int getEmail() {
-        return email;
-    }
-
-    public void setEmail(int email) {
-        this.email = email;
-    }
-
-    public String getPhoneNo() {
-        return phoneNo;
-    }
-
-    public void setPhoneNo(String phoneNo) {
-        this.phoneNo = phoneNo;
-    }
-
-    public String getHashedPassword() {
-        return hashedPassword;
-    }
-
-    public void setHashedPassword(String hashedPassword) {
-        this.hashedPassword = hashedPassword;
-    }
-
-    public int getType() {
-        return type;
-    }
-
-    public void setType(int type) {
-        this.type = type;
-    }
-}
Index: src/main/java/com/leftovers/order/tag/model/tag.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/tag/model/tag.java b/src/main/java/com/leftovers/order/tag/model/tag.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/tag/model/tag.java	
+++ /dev/null	
@@ -1,32 +0,0 @@
-package com.leftovers.order.tag.model;
-
-
-import javax.persistence.*;
-
-@Entity
-@Table(name="tags")
-public class tag {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    @Column(name = "name")
-    public String name;
-
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-}
Index: src/main/java/com/leftovers/order/restaurant/dao/restaurantDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/dao/restaurantDAO.java b/src/main/java/com/leftovers/order/restaurant/dao/restaurantDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/restaurant/dao/restaurantDAO.java	
+++ /dev/null	
@@ -1,70 +0,0 @@
-package com.leftovers.order.restaurant.dao;
-
-
-import com.leftovers.order.restaurant.model.restaurant;
-import com.leftovers.order.restaurant.repository.restaurantRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class restaurantDAO {
-
-    @Autowired
-    restaurantRepository fdr;
-
-    public boolean addRestaurant(restaurant newRestaurant) {
-
-        try {
-            fdr.save(newRestaurant);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<restaurant> getRestaurantById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    /*
-    public List<restaurant> getRestaurantByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<restaurant> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<restaurant>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateRestaurant(restaurant updateRestaurant) {
-        try {
-            fdr.save(updateRestaurant);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/tag/service/tagService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/tag/service/tagService.java b/src/main/java/com/leftovers/order/tag/service/tagService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/tag/service/tagService.java	
+++ /dev/null	
@@ -1,109 +0,0 @@
-package com.leftovers.order.tag.service;
-
-
-
-import com.leftovers.order.tag.dao.tagDAO;
-import com.leftovers.order.tag.model.tag;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class tagService {
-
-    @Autowired
-    tagDAO servDAO;
-    public boolean addTag(tag newTag) {
-        try {
-            servDAO.addTag(newTag);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<tag> getTagById(Integer id) {
-        try {
-            return servDAO.getTagById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-
-    public List<tag> getTagByName(String name) {
-        try {
-            return servDAO.getTagByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-
-    public List<tag> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<tag> tagFromDb = servDAO.getTagById(id);
-        tag tagObject = tagFromDb.get();
-        tagObject.setName(name);
-        if (servDAO.UpdateTag(tagObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      tags don't have prices
-    public boolean updateTagPrice(Integer id, float price) {
-        Optional<tag> tagFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  tags don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  tags don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/driver/service/driverService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/driver/service/driverService.java b/src/main/java/com/leftovers/order/driver/service/driverService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/driver/service/driverService.java	
+++ /dev/null	
@@ -1,110 +0,0 @@
-package com.leftovers.order.driver.service;
-
-
-
-import com.leftovers.order.driver.dao.driverDAO;
-import com.leftovers.order.driver.model.driver;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class driverService {
-
-    @Autowired
-    driverDAO servDAO;
-    public boolean addDriver(driver newDriver) {
-        try {
-            servDAO.addDriver(newDriver);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<driver> getDriverById(Integer id) {
-        try {
-            return servDAO.getDriverById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-/*
-    public List<driver> getDriverByName(String name) {
-        try {
-            return servDAO.getDriverByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
-    public List<driver> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<driver> driverFromDb = servDAO.getDriverById(id);
-        driver driverObject = driverFromDb.get();
-        //driverObject.setName(name);
-        if (servDAO.UpdateDriver(driverObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      drivers don't have prices
-    public boolean updateDriverPrice(Integer id, float price) {
-        Optional<driver> driverFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  drivers don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  drivers don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/product/dao/productDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/product/dao/productDAO.java b/src/main/java/com/leftovers/order/product/dao/productDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/product/dao/productDAO.java	
+++ /dev/null	
@@ -1,87 +0,0 @@
-package com.leftovers.order.product.dao;
-
-
-import com.leftovers.order.product.model.product;
-import com.leftovers.order.product.repository.productRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-import org.springframework.web.bind.annotation.PathVariable;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class productDAO {
-
-    @Autowired
-    productRepository fdr;
-
-    public boolean addProduct(product newProduct) {
-
-        try {
-            fdr.save(newProduct);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<product> getProductById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public String readFromId(@PathVariable Integer id)
-    {
-        try {
-            Optional<product> result = fdr.findById(id);
-            if (result.isEmpty()) {
-                return "empty";
-            }
-            return "full";
-        }
-        catch(Exception e)
-        {
-            //return "AtDAO";
-            return e.getMessage();
-        }
-    }
-
-    /*
-    public List<product> getProductByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<product> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<product>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateProduct(product updateProduct) {
-        try {
-            fdr.save(updateProduct);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/driver/repository/driverRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/driver/repository/driverRepository.java b/src/main/java/com/leftovers/order/driver/repository/driverRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/driver/repository/driverRepository.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package com.leftovers.order.driver.repository;
-
-import com.leftovers.order.driver.model.driver;
-import org.springframework.data.repository.CrudRepository;
-
-
-public interface driverRepository extends CrudRepository<driver, Integer> {
-        driver findById(long id);
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/discount/dao/discountDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/discount/dao/discountDAO.java b/src/main/java/com/leftovers/order/discount/dao/discountDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/discount/dao/discountDAO.java	
+++ /dev/null	
@@ -1,70 +0,0 @@
-package com.leftovers.order.discount.dao;
-
-
-import com.leftovers.order.discount.model.discount;
-import com.leftovers.order.discount.repository.discountRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class discountDAO {
-
-    @Autowired
-    discountRepository fdr;
-
-    public boolean addDiscount(discount newDiscount) {
-
-        try {
-            fdr.save(newDiscount);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<discount> getDiscountById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    /*
-    public List<discount> getDiscountByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<discount> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<discount>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateDiscount(discount updateDiscount) {
-        try {
-            fdr.save(updateDiscount);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/product/controller/productController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/product/controller/productController.java b/src/main/java/com/leftovers/order/product/controller/productController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/product/controller/productController.java	
+++ /dev/null	
@@ -1,149 +0,0 @@
-package com.leftovers.order.product.controller;
-
-
-import com.leftovers.order.product.model.product;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.List;
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/product")
-public class productController {
-
-    @Autowired
-    com.leftovers.order.product.service.productService productService;
-
-
-    @RequestMapping
-    public String IsItWorking() {
-        return "Product is working!";
-    }
-
-    @GetMapping(path = "/AddPredefined")
-    public String AddPredefined()
-    {
-       /* product newProduct = new product();
-        newProduct.setId(6);
-        newProduct.setLatitude(4523);
-        newProduct.setLongitude(0.01);
-        newProduct.setZipCode(01256);
-        newProduct.setCountry("Narnia");
-        newProduct.setStreetProduct("lamppost");
-        newProduct.setHouseNumber("HOUS7");
-        newProduct.setUnitNumber("UN077");
-        productService.addProduct(newProduct);*/
-        return "Complete?";
-    }
-
-
-
-    @GetMapping(path = "/all")
-    public List<product> getAll() {
-        return productService.getAll();
-    }
-
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addProduct(@RequestParam product newProduct) {
-        System.out.println(newProduct.getName());
-        if (productService.addProduct(newProduct))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<product> getProductById(@PathVariable Integer id) {
-        return productService.getProductById(id);
-    }
-    @RequestMapping(path = "/showid/{id}" , method = RequestMethod.GET)
-    public String showId(@PathVariable Integer id) {
-        Optional<product> newProduct = productService.getProductById(id);
-        if(newProduct.isEmpty())
-        {
-            return "null";
-        }
-        return newProduct.get().toString();
-    }
-    @RequestMapping(path = "/read/{id}" , method = RequestMethod.GET)
-    public String readFromId(@PathVariable Integer id)
-    {
-        try {
-            return productService.readFromId(id);
-
-        }
-        catch(Exception e)
-        {
-            return "At controller";
-        }
-    }
-    /*
-    public String getProductById(@PathVariable Integer id) {
-        return productService.getProductById(id).get().toString();
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<product> getFoodByName(@PathVariable String name) {
-        return productService.getProductByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateProductName(@PathVariable Integer id , @RequestParam String name ) {
-        if (productService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      products don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (productService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  products don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  products don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/driver/dao/driverDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/driver/dao/driverDAO.java b/src/main/java/com/leftovers/order/driver/dao/driverDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/driver/dao/driverDAO.java	
+++ /dev/null	
@@ -1,70 +0,0 @@
-package com.leftovers.order.driver.dao;
-
-
-import com.leftovers.order.driver.model.driver;
-import com.leftovers.order.driver.repository.driverRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class driverDAO {
-
-    @Autowired
-    driverRepository fdr;
-
-    public boolean addDriver(driver newDriver) {
-
-        try {
-            fdr.save(newDriver);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<driver> getDriverById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    /*
-    public List<driver> getDriverByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<driver> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<driver>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateDriver(driver updateDriver) {
-        try {
-            fdr.save(updateDriver);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/driver/model/driver.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/driver/model/driver.java b/src/main/java/com/leftovers/order/driver/model/driver.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/driver/model/driver.java	
+++ /dev/null	
@@ -1,60 +0,0 @@
-package com.leftovers.order.driver.model;
-
-
-import com.leftovers.order.account.model.account;
-import com.leftovers.order.address.model.address;
-//import com.leftovers.order.order.model.order;
-import com.leftovers.order.restaurant.model.restaurant;
-
-import javax.persistence.*;
-import java.util.Set;
-
-@Entity
-@Table(name="driver")
-public class driver {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    /*@Id
-    @OneToOne(fetch = FetchType.LAZY)//cascade = CascadeType.ALL)
-    @JoinColumn(name = "account_id")//, referencedColumnName = "id")
-    public account accountId;
-*/
-
-    @Column(name = "license_plate", nullable = false)
-    public String licensePlate;
-
-    @Column(name = "rating", nullable = false)
-    public double rating;
-
-    //@OneToMany(mappedBy = "driverId")
-    //public Set<order> Order;
-    //@OneToOne(mappedBy = "driverId")
-    //public order Order;
-
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getLicensePlate() {
-        return licensePlate;
-    }
-
-    public void setLicensePlate(String licensePlate) {
-        this.licensePlate = licensePlate;
-    }
-
-    public double getRating() {
-        return rating;
-    }
-
-    public void setRating(double rating) {
-        this.rating = rating;
-    }
-}
Index: src/main/java/com/leftovers/order/discount/repository/discountRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/discount/repository/discountRepository.java b/src/main/java/com/leftovers/order/discount/repository/discountRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/discount/repository/discountRepository.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package com.leftovers.order.discount.repository;
-
-import com.leftovers.order.discount.model.discount;
-import org.springframework.data.repository.CrudRepository;
-
-
-public interface discountRepository extends CrudRepository<discount, Integer> {
-        discount findById(long id);
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/tag/controller/tagController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/tag/controller/tagController.java b/src/main/java/com/leftovers/order/tag/controller/tagController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/tag/controller/tagController.java	
+++ /dev/null	
@@ -1,105 +0,0 @@
-package com.leftovers.order.tag.controller;
-
-
-import com.leftovers.order.tag.model.tag;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/tag")
-public class tagController {
-
-    @Autowired
-    com.leftovers.order.tag.service.tagService tagService;
-/*
-    @RequestMapping
-    public String IsItWorking() {
-        return "Yes, it is working!";
-    }
-*/
-    /*
-    @GetMapping(path = "")
-    public List<tag> getAll() {
-        return tagService.getAll();
-    }
-    */
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addTag(@RequestParam tag newTag) {
-        System.out.println(newTag.getName());
-        if (tagService.addTag(newTag))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<tag> getTagById(@PathVariable Integer id) {
-        return tagService.getTagById(id);
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<tag> getFoodByName(@PathVariable String name) {
-        return tagService.getTagByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateTagName(@PathVariable Integer id , @RequestParam String name ) {
-        if (tagService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      tags don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (tagService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  tags don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  tags don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/address/service/addressService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/address/service/addressService.java b/src/main/java/com/leftovers/order/address/service/addressService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/address/service/addressService.java	
+++ /dev/null	
@@ -1,122 +0,0 @@
-package com.leftovers.order.address.service;
-
-
-
-import com.leftovers.order.address.dao.addressDAO;
-import com.leftovers.order.address.model.address;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-import org.springframework.web.bind.annotation.PathVariable;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class addressService {
-
-    @Autowired
-    addressDAO servDAO;
-    public boolean addAddress(address newAddress) {
-        try {
-            servDAO.addAddress(newAddress);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<address> getAddressById(Integer id) {
-        try {
-            return servDAO.getAddressById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-
-    public String readFromId(@PathVariable Integer id) {
-        try {
-            return servDAO.readFromId(id);
-        }
-        catch(Exception e)
-        {
-            return "At Service";
-
-        }
-    }
-/*
-    public List<address> getAddressByName(String name) {
-        try {
-            return servDAO.getAddressByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
-    public List<address> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<address> addressFromDb = servDAO.getAddressById(id);
-        address addressObject = addressFromDb.get();
-        //addressObject.setName(name);
-        if (servDAO.UpdateAddress(addressObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      addresss don't have prices
-    public boolean updateAddressPrice(Integer id, float price) {
-        Optional<address> addressFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  addresss don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  addresss don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/tag/dao/tagDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/tag/dao/tagDAO.java b/src/main/java/com/leftovers/order/tag/dao/tagDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/tag/dao/tagDAO.java	
+++ /dev/null	
@@ -1,69 +0,0 @@
-package com.leftovers.order.tag.dao;
-
-
-import com.leftovers.order.tag.model.tag;
-import com.leftovers.order.tag.repository.tagRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class tagDAO {
-
-    @Autowired
-    tagRepository fdr;
-
-    public boolean addTag(tag newTag) {
-
-        try {
-            fdr.save(newTag);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<tag> getTagById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public List<tag> getTagByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public List<tag> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<tag>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateTag(tag updateTag) {
-        try {
-            fdr.save(updateTag);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/discount/controller/discountController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/discount/controller/discountController.java b/src/main/java/com/leftovers/order/discount/controller/discountController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/discount/controller/discountController.java	
+++ /dev/null	
@@ -1,123 +0,0 @@
-package com.leftovers.order.discount.controller;
-
-
-import com.leftovers.order.discount.model.discount;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/discount")
-public class discountController {
-
-    @Autowired
-    com.leftovers.order.discount.service.discountService discountService;
-
-
-    @RequestMapping
-    public String IsItWorking() {
-        return "Discount is working!";
-    }
-
-    @GetMapping(path = "/AddPredefined")
-    public String AddPredefined()
-    {
-       /* discount newDiscount = new discount();
-        newDiscount.setId(6);
-        newDiscount.setLatitude(4523);
-        newDiscount.setLongitude(0.01);
-        newDiscount.setZipCode(01256);
-        newDiscount.setCountry("Narnia");
-        newDiscount.setStreetDiscount("lamppost");
-        newDiscount.setHouseNumber("HOUS7");
-        newDiscount.setUnitNumber("UN077");
-        discountService.addDiscount(newDiscount);*/
-        return "Complete?";
-    }
-
-
-    /*
-    @GetMapping(path = "")
-    public List<discount> getAll() {
-        return discountService.getAll();
-    }
-    */
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addDiscount(@RequestParam discount newDiscount) {
-        System.out.println(newDiscount.getName());
-        if (discountService.addDiscount(newDiscount))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<discount> getDiscountById(@PathVariable Integer id) {
-        return discountService.getDiscountById(id);
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<discount> getFoodByName(@PathVariable String name) {
-        return discountService.getDiscountByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateDiscountName(@PathVariable Integer id , @RequestParam String name ) {
-        if (discountService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      discounts don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (discountService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  discounts don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  discounts don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/tag/repository/tagRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/tag/repository/tagRepository.java b/src/main/java/com/leftovers/order/tag/repository/tagRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/tag/repository/tagRepository.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package com.leftovers.order.tag.repository;
-
-import com.leftovers.order.tag.model.tag;
-import org.springframework.data.repository.CrudRepository;
-
-import java.util.List;
-
-
-public interface tagRepository extends CrudRepository<tag, Integer> {
-    List<tag> findByName(String name);
-    tag findById(long id);
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/product/repository/productRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/product/repository/productRepository.java b/src/main/java/com/leftovers/order/product/repository/productRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/product/repository/productRepository.java	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.leftovers.order.product.repository;
-
-import com.leftovers.order.product.model.product;
-import org.springframework.data.repository.CrudRepository;
-
-
-public interface productRepository extends CrudRepository<product, Integer> {
-        product findById(long id);
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/address/dao/addressDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/address/dao/addressDAO.java b/src/main/java/com/leftovers/order/address/dao/addressDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/address/dao/addressDAO.java	
+++ /dev/null	
@@ -1,87 +0,0 @@
-package com.leftovers.order.address.dao;
-
-
-import com.leftovers.order.address.repository.addressRepository;
-import com.leftovers.order.address.model.address;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-import org.springframework.web.bind.annotation.PathVariable;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class addressDAO {
-
-    @Autowired
-    addressRepository fdr;
-
-    public boolean addAddress(address newAddress) {
-
-        try {
-            fdr.save(newAddress);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<address> getAddressById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public String readFromId(@PathVariable Integer id)
-    {
-        try {
-            Optional<address> result = fdr.findById(id);
-            if (result.isEmpty()) {
-                return "empty";
-            }
-            return "full";
-        }
-        catch(Exception e)
-        {
-            //return "AtDAO";
-            return e.getMessage();
-        }
-    }
-
-    /*
-    public List<address> getAddressByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<address> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<address>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateAddress(address updateAddress) {
-        try {
-            fdr.save(updateAddress);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/account/repository/accountRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/account/repository/accountRepository.java b/src/main/java/com/leftovers/order/account/repository/accountRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/account/repository/accountRepository.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package com.leftovers.order.account.repository;
-
-import com.leftovers.order.account.model.account;
-import org.springframework.data.repository.CrudRepository;
-
-
-public interface accountRepository extends CrudRepository<account, Integer> {
-        account findById(long id);
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/discount/model/discount.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/discount/model/discount.java b/src/main/java/com/leftovers/order/discount/model/discount.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/discount/model/discount.java	
+++ /dev/null	
@@ -1,73 +0,0 @@
-package com.leftovers.order.discount.model;
-
-
-//import com.leftovers.order.order.model.order;
-//import com.leftovers.order.restaurant.model.restaurant;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name="discount")
-public class discount {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    @Column(name = "code")
-    public String code;
-
-    @Column(name = "percent")
-    public double percent;
-
-    @Column(name = "value")
-    public double value;
-
-/*
-    @OneToOne(mappedBy = "discountId")
-    public order Order;
-*/
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getCode() {
-        return code;
-    }
-
-    public void setCode(String code) {
-        this.code = code;
-    }
-
-    public double getPercent() {
-        return percent;
-    }
-
-    public void setPercent(double percent) {
-        this.percent = percent;
-    }
-
-    public double getValue() {
-        return value;
-    }
-
-    public void setValue(double value) {
-        this.value = value;
-    }
-
-
-    /*
-    public order getOrder() {
-        return Order;
-    }
-
-    public void setOrder(order order) {
-        Order = order;
-    }
-    */
-
-}
Index: src/main/java/com/leftovers/order/account/controller/accountController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/account/controller/accountController.java b/src/main/java/com/leftovers/order/account/controller/accountController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/account/controller/accountController.java	
+++ /dev/null	
@@ -1,125 +0,0 @@
-package com.leftovers.order.account.controller;
-
-
-import com.leftovers.order.account.model.account;
-import com.leftovers.order.account.service.accountService;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-
-import com.leftovers.order.account.service.accountService;
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/account")
-public class accountController {
-
-    @Autowired
-    accountService accountService;
-
-
-    @RequestMapping
-    public String IsItWorking() {
-        return "Account is working!";
-    }
-
-    @GetMapping(path = "/AddPredefined")
-    public String AddPredefined()
-    {
-       /* account newAccount = new account();
-        newAccount.setId(6);
-        newAccount.setLatitude(4523);
-        newAccount.setLongitude(0.01);
-        newAccount.setZipCode(01256);
-        newAccount.setCountry("Narnia");
-        newAccount.setStreetAccount("lamppost");
-        newAccount.setHouseNumber("HOUS7");
-        newAccount.setUnitNumber("UN077");
-        accountService.addAccount(newAccount);*/
-        return "Complete?";
-    }
-
-
-    /*
-    @GetMapping(path = "")
-    public List<account> getAll() {
-        return accountService.getAll();
-    }
-    */
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addAccount(@RequestParam account newAccount) {
-        System.out.println(newAccount.getName());
-        if (accountService.addAccount(newAccount))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<account> getAccountById(@PathVariable Integer id) {
-        return accountService.getAccountById(id);
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<account> getFoodByName(@PathVariable String name) {
-        return accountService.getAccountByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateAccountName(@PathVariable Integer id , @RequestParam String name ) {
-        if (accountService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      accounts don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (accountService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  accounts don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  accounts don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/account/service/accountService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/account/service/accountService.java b/src/main/java/com/leftovers/order/account/service/accountService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/account/service/accountService.java	
+++ /dev/null	
@@ -1,110 +0,0 @@
-package com.leftovers.order.account.service;
-
-
-
-import com.leftovers.order.account.dao.accountDAO;
-import com.leftovers.order.account.model.account;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class accountService {
-
-    @Autowired
-    accountDAO servDAO;
-    public boolean addAccount(account newAccount) {
-        try {
-            servDAO.addAccount(newAccount);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<account> getAccountById(Integer id) {
-        try {
-            return servDAO.getAccountById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-/*
-    public List<account> getAccountByName(String name) {
-        try {
-            return servDAO.getAccountByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
-    public List<account> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<account> accountFromDb = servDAO.getAccountById(id);
-        account accountObject = accountFromDb.get();
-        //accountObject.setName(name);
-        if (servDAO.UpdateAccount(accountObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      accounts don't have prices
-    public boolean updateAccountPrice(Integer id, float price) {
-        Optional<account> accountFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  accounts don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  accounts don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/driver/controller/driverController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/driver/controller/driverController.java b/src/main/java/com/leftovers/order/driver/controller/driverController.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/driver/controller/driverController.java	
+++ /dev/null	
@@ -1,129 +0,0 @@
-package com.leftovers.order.driver.controller;
-
-
-import com.leftovers.order.account.model.account;
-import com.leftovers.order.account.service.accountService;
-import com.leftovers.order.driver.model.driver;
-import com.leftovers.order.restaurant.model.restaurant;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.Optional;
-
-
-@RestController
-@RequestMapping(path = "/driver")
-public class driverController {
-
-    @Autowired
-    com.leftovers.order.driver.service.driverService driverService;
-    @Autowired
-    com.leftovers.order.account.service.accountService accountService;
-
-
-    @RequestMapping
-    public String IsItWorking() {
-        return "Driver is working!";
-    }
-
-    @GetMapping(path = "/AddPredefined")
-    public String AddPredefined()
-    {
-        //Optional<account> newOpt = accountService.getAccountById(3);
-        //if(newOpt.isEmpty())
-        //{
-        //    return "Failed to obtain account";
-        //}
-/*
-        driver newDriver = new driver();
-        newDriver.setId(3);
-        newDriver.setLicensePlate("SRT 345");
-        newDriver.setRating(3.3);
-        driverService.addDriver(newDriver);
-  */      return "Complete?";
-    }
-
-
-    /*
-    @GetMapping(path = "")
-    public List<driver> getAll() {
-        return driverService.getAll();
-    }
-    */
-
-    /*
-    @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
-    public String addDriver(@RequestParam driver newDriver) {
-        System.out.println(newDriver.getName());
-        if (driverService.addDriver(newDriver))
-        {
-            return "Item Added Succesfully";
-        }
-        return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<driver> getDriverById(@PathVariable Integer id) {
-        return driverService.getDriverById(id);
-    }
-/*
-    @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
-    public List<driver> getFoodByName(@PathVariable String name) {
-        return driverService.getDriverByName(name);
-    }
-
-    @PutMapping(path = "/update-name/{id}")
-    public String updateDriverName(@PathVariable Integer id , @RequestParam String name ) {
-        if (driverService.updateFoodName(id , name)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-
-    end minimalizing commenting/*
-
-
-    /*      drivers don't have prices
-    @PutMapping(path = "/update-price/{id}")
-    public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
-        if (driverService.updateFoodPrice(id , price)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  drivers don't have descriptions
-    @PutMapping(path = "/update-description/{id}")
-    public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
-        if (foodService.updateFoodDescription(id , description)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-    /*  drivers don't have restaurants
-    @PutMapping(path = "/update-restaurant/{id}")
-    public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
-        if (foodService.updateFoodRestaurant(id , restaurantId)) {
-            return "Updated Successfully";
-        }
-        else {
-            return "and error occured";
-        }
-    }
-*/
-
-/*
-    @DeleteMapping(path = "/delete")
-    public String deleteByid(@RequestParam Integer id) {
-        return "del success";
-    }*/
-}
Index: src/main/java/com/leftovers/order/product/model/product.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/product/model/product.java b/src/main/java/com/leftovers/order/product/model/product.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/product/model/product.java	
+++ /dev/null	
@@ -1,110 +0,0 @@
-package com.leftovers.order.product.model;
-
-
-import com.leftovers.order.restaurant.model.restaurant;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name="product")
-public class product {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    @Column(name = "name")
-    public String name;
-/*
-    @Column(name = "restaurant_id")
-    public int restaurantId;
-*/
-    @Column(name = "price")
-    public double price;
-
-    @Column(name = "description")
-    public String description;
-
-
-    //@OneToOne(mappedBy = "productId")
-    //public restaurant Restaurant;
-
-    @ManyToOne
-    @JoinColumn(name = "restaurant_id", nullable = false)
-    public restaurant restaurantId;
-
-
-
-    public String displayId()
-    {
-        //return "\"id\":" + Integer.toString(id);
-        return "\"id\":" + id;
-    }
-
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /*
-    public int getRestaurantId() {
-        return restaurantId;
-    }
-
-    public void setRestaurantId(int restaurantId) {
-        this.restaurantId = restaurantId;
-    }
-*/
-    public double getPrice() {
-        return price;
-    }
-
-    public void setPrice(double price) {
-        this.price = price;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public restaurant getRestaurantId() {
-        return restaurantId;
-    }
-
-    public void setRestaurantId(restaurant restaurantId) {
-        this.restaurantId = restaurantId;
-    }
-
-    //public restaurant getRestaurant() {return Restaurant;}
-
-    //public void setRestaurant(restaurant restaurant) {Restaurant = restaurant;}
-
-
-    @Override
-    public String toString()
-    {
-        return "{\"id\":" + id + ",\"name\":\"" + name + "\",\"restaurant_id\":" + restaurantId.getId() + ",\"price\":" + price + ",\"description\":\"" + description + "\"}";
-    }
-
-
-   /* // Overriding toString() method of String class
-    @Override
-    public String toString() {
-        return this.id + " + " + this.latitude + "i";
-    }*/
-}
Index: src/main/java/com/leftovers/order/address/model/address.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/address/model/address.java b/src/main/java/com/leftovers/order/address/model/address.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/address/model/address.java	
+++ /dev/null	
@@ -1,136 +0,0 @@
-package com.leftovers.order.address.model;
-
-
-import com.leftovers.order.restaurant.model.restaurant;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name="address")
-public class address {
-    @Id
-    @Column(name = "id", nullable = false)
-    public int id;
-
-    @Column(name = "latitude")
-    public double latitude;
-
-    @Column(name = "longitude")
-    public double longitude;
-
-    @Column(name = "zip_code")
-    public int zipCode;
-
-    @Column(name = "country")
-    public String country;
-
-    @Column(name = "street_address")
-    public String streetAddress;
-
-    @Column(name = "house_number")
-    public String houseNumber;
-    @Column(name = "unit_number")
-    public String unitNumber;
-
-
-    @OneToOne(mappedBy = "addressId")
-    public restaurant Restaurant;
-
-
-    public String displayId()
-    {
-        //return "\"id\":" + Integer.toString(id);
-        return "\"id\":" + id;
-    }
-
-    @Override
-    public String toString()
-    {
-        //{"id":3,"latitude":5.5,"longitude":7.14,"zipCode":97701,"country":"Fakeland","streetAddress":"FakeStreet","houseNumber":"hs15","unitNumber":"Un55"}
-        return "{\"id\":" + id + ",\"latitude\":" + latitude + ",\"longitude\":" + longitude + ",\"zipCode\":" + zipCode + ",\"country\":\"" + country + "\",\"streetAddress\":\"" + streetAddress + "\",\"houseNumber\":\"" + houseNumber + "\",\"unitNumber\":\"" + unitNumber + "\"}";
-    }
-
-
-    public int getId() {
-        return id;
-    }
-
-    public void setId(int id) {
-        this.id = id;
-    }
-
-    public double getLatitude() {
-        return latitude;
-    }
-
-    public void setLatitude(double latitude) {
-        this.latitude = latitude;
-    }
-
-    public double getLongitude() {
-        return longitude;
-    }
-
-    public void setLongitude(double longitude) {
-        this.longitude = longitude;
-    }
-
-    public int getZipCode() {
-        return zipCode;
-    }
-
-    public void setZipCode(int zipCode) {
-        this.zipCode = zipCode;
-    }
-
-    public String getCountry() {
-        return country;
-    }
-
-
-
-
-    public void setCountry(String country) {
-        this.country = country;
-    }
-
-    public String getStreetAddress() {
-        return streetAddress;
-    }
-
-    public void setStreetAddress(String streetAddress) {
-        this.streetAddress = streetAddress;
-    }
-
-    public String getHouseNumber() {
-        return houseNumber;
-    }
-
-    public void setHouseNumber(String houseNumber) {
-        this.houseNumber = houseNumber;
-    }
-
-    public String getUnitNumber() {
-        return unitNumber;
-    }
-
-    public void setUnitNumber(String unitNumber) {
-        this.unitNumber = unitNumber;
-    }
-
-    public restaurant getRestaurant() {
-        return Restaurant;
-    }
-
-    public void setRestaurant(restaurant restaurant) {
-        Restaurant = restaurant;
-    }
-
-
-
-   /* // Overriding toString() method of String class
-    @Override
-    public String toString() {
-        return this.id + " + " + this.latitude + "i";
-    }*/
-}
Index: src/main/java/com/leftovers/order/product/service/productService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/product/service/productService.java b/src/main/java/com/leftovers/order/product/service/productService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/product/service/productService.java	
+++ /dev/null	
@@ -1,122 +0,0 @@
-package com.leftovers.order.product.service;
-
-
-
-import com.leftovers.order.product.dao.productDAO;
-import com.leftovers.order.product.model.product;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-import org.springframework.web.bind.annotation.PathVariable;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class productService {
-
-    @Autowired
-    productDAO servDAO;
-    public boolean addProduct(product newProduct) {
-        try {
-            servDAO.addProduct(newProduct);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<product> getProductById(Integer id) {
-        try {
-            return servDAO.getProductById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-
-    public String readFromId(@PathVariable Integer id) {
-        try {
-            return servDAO.readFromId(id);
-        }
-        catch(Exception e)
-        {
-            return "At Service";
-
-        }
-    }
-/*
-    public List<product> getProductByName(String name) {
-        try {
-            return servDAO.getProductByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
-    public List<product> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<product> productFromDb = servDAO.getProductById(id);
-        product productObject = productFromDb.get();
-        //productObject.setName(name);
-        if (servDAO.UpdateProduct(productObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      products don't have prices
-    public boolean updateProductPrice(Integer id, float price) {
-        Optional<product> productFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  products don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  products don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/account/dao/accountDAO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/account/dao/accountDAO.java b/src/main/java/com/leftovers/order/account/dao/accountDAO.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/account/dao/accountDAO.java	
+++ /dev/null	
@@ -1,70 +0,0 @@
-package com.leftovers.order.account.dao;
-
-
-import com.leftovers.order.account.model.account;
-import com.leftovers.order.account.repository.accountRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class accountDAO {
-
-    @Autowired
-    accountRepository fdr;
-
-    public boolean addAccount(account newAccount) {
-
-        try {
-            fdr.save(newAccount);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<account> getAccountById(Integer id) {
-        var result = fdr.findById(id);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    /*
-    public List<account> getAccountByName(String name) {
-        var result = fdr.findByName(name);
-        if (result != null) {
-            return result;
-        }
-        else {
-            return null;
-        }
-    }
-*/
-    public List<account> getAll() {
-        var result = fdr.findAll();
-        if (result != null) {
-            return (List<account>) result;
-        }
-        else {
-            return null;
-        }
-    }
-
-    public boolean UpdateAccount(account updateAccount) {
-        try {
-            fdr.save(updateAccount);
-        }
-        catch (Exception e) {
-            System.out.println(e.getCause());
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/discount/service/discountService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/discount/service/discountService.java b/src/main/java/com/leftovers/order/discount/service/discountService.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/discount/service/discountService.java	
+++ /dev/null	
@@ -1,110 +0,0 @@
-package com.leftovers.order.discount.service;
-
-
-
-import com.leftovers.order.discount.dao.discountDAO;
-import com.leftovers.order.discount.model.discount;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.Optional;
-
-@Component
-public class discountService {
-
-    @Autowired
-    discountDAO servDAO;
-    public boolean addDiscount(discount newDiscount) {
-        try {
-            servDAO.addDiscount(newDiscount);
-        }
-        catch (Exception e)
-        {
-            throw e;
-        }
-        return true;
-    }
-
-    public Optional<discount> getDiscountById(Integer id) {
-        try {
-            return servDAO.getDiscountById(id);
-        }
-        catch (Exception e) {
-            throw e;
-        }
-    }
-/*
-    public List<discount> getDiscountByName(String name) {
-        try {
-            return servDAO.getDiscountByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
-    public List<discount> getAll() {
-        return servDAO.getAll();
-    }
-
-    public boolean updateFoodName(Integer id, String name) {
-        Optional<discount> discountFromDb = servDAO.getDiscountById(id);
-        discount discountObject = discountFromDb.get();
-        //discountObject.setName(name);
-        if (servDAO.UpdateDiscount(discountObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-
-    /*      discounts don't have prices
-    public boolean updateDiscountPrice(Integer id, float price) {
-        Optional<discount> discountFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setPrice(price);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-    /*  discounts don't have descriptions
-    public boolean updateFoodDescription(Integer id, String description) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setDescription(description);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-     */
-
-    /*  discounts don't have restaurants
-    public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
-        Optional<Food> foodFromDb = foodDao.getFoodById(id);
-        Food foodObject = foodFromDb.get();
-        foodObject.setRestaurantId(restaurantId);
-        if (foodDao.UpdateFood(foodObject))
-        {
-            return true;
-        }
-        else {
-            return false;
-        }
-    }
-    */
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/address/repository/addressRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/address/repository/addressRepository.java b/src/main/java/com/leftovers/order/address/repository/addressRepository.java
deleted file mode 100644
--- a/src/main/java/com/leftovers/order/address/repository/addressRepository.java	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package com.leftovers.order.address.repository;
-
-import com.leftovers.order.address.model.address;
-import org.springframework.data.repository.CrudRepository;
-
-
-public interface addressRepository extends CrudRepository<address, Integer> {
-        address findById(long id);
-
-}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/order/service/orderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/leftovers/order/order/service/orderService.java b/src/main/java/com/leftovers/order/order/service/orderService.java
--- a/src/main/java/com/leftovers/order/order/service/orderService.java	
+++ b/src/main/java/com/leftovers/order/order/service/orderService.java	
@@ -1,5 +1,5 @@
 package com.leftovers.order.order.service;
-
+/*
 
 
 import com.leftovers.order.order.dao.orderDAO;
@@ -69,21 +69,11 @@
         return servDAO.updatePrice(oId, price);
     }
 
-
-/*
-    public List<order> getOrderByName(String name) {
-        try {
-            return servDAO.getOrderByName(name);
-        }
-        catch (Exception e) {
-            throw e;
-            throw e;
-        }
-    }
-*/
     public List<order> getAll() {
         return servDAO.getAll();
     }
+
+    */
 /*
     public boolean updateFoodName(Integer id, String name) {
         Optional<order> orderFromDb = servDAO.getOrderById(id);
@@ -97,8 +87,11 @@
             return false;
         }
     }
-*/
-    /*      orders don't have prices
+
+
+
+
+          orders don't have prices
     public boolean updateOrderPrice(Integer id, float price) {
         Optional<order> orderFromDb = foodDao.getFoodById(id);
         Food foodObject = foodFromDb.get();
@@ -111,9 +104,11 @@
             return false;
         }
     }
-    */
+
 
-    /*  orders don't have descriptions
+
+
+      orders don't have descriptions
     public boolean updateFoodDescription(Integer id, String description) {
         Optional<Food> foodFromDb = foodDao.getFoodById(id);
         Food foodObject = foodFromDb.get();
@@ -126,9 +121,11 @@
             return false;
         }
     }
-     */
+
 
-    /*  orders don't have restaurants
+
+
+     orders don't have restaurants
     public boolean updateFoodRestaurant(Integer id, Integer restaurantId) {
         Optional<Food> foodFromDb = foodDao.getFoodById(id);
         Food foodObject = foodFromDb.get();
@@ -141,6 +138,20 @@
             return false;
         }
     }
-    */
+
+
+
+    public List<order> getOrderByName(String name) {
+        try {
+            return servDAO.getOrderByName(name);
+        }
+        catch (Exception e) {
+            throw e;
+            throw e;
+        }
+    }
+*/
+/*
+}
 
-}
\ No newline at end of file
+ */
Index: src/main/java/com/leftovers/order/order/model/order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/leftovers/order/order/model/order.java b/src/main/java/com/leftovers/order/order/model/order.java
--- a/src/main/java/com/leftovers/order/order/model/order.java	
+++ b/src/main/java/com/leftovers/order/order/model/order.java	
@@ -1,6 +1,11 @@
 package com.leftovers.order.order.model;
 
 
+
+
+
+
+/*
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.Id;
@@ -89,3 +94,4 @@
         this.totalPrice = totalPrice;
     }
 }
+*/
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateRestaurantDTO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateRestaurantDTO.java b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateRestaurantDTO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateRestaurantDTO.java	
@@ -0,0 +1,59 @@
+package com.leftovers.order.restaurant.restaurantDTO;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import javax.validation.constraints.*;
+import java.sql.Time;
+
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class CreateRestaurantDTO {
+    @NotNull
+    @NotBlank(message = "Restaurant name is required")
+    public String name;
+
+    @NotNull
+    @NotBlank(message = "Zipcode is required")
+    @Pattern(regexp = "^\\d{5}(?:[-\\s]\\d{4})?$")
+    public String zipcode;
+
+
+    @NotNull
+    @NotBlank(message = "State is required")
+    public String state;
+
+    @NotNull
+    @NotBlank(message = "City is required")
+    public String city;
+
+    @NotNull
+    @NotBlank(message = "Country is required")
+    public String country;
+
+    @NotNull
+    @NotBlank(message = "Street Address is required")
+    public String streetAddress;
+
+    public String unitNumber;
+
+    @NotNull
+    @NotBlank(message = "Phone number is required")
+    @Pattern(regexp = "^\\d{10,15}$", message = "Phone number must be between 10 and 15 numbers")
+    public String phoneNo;
+
+    public String website;
+
+    @NotNull
+    @NotBlank(message = "Opening time is required")
+    public Time openTime;
+
+    @NotNull
+    @NotBlank(message = "Closing time is required")
+    public Time closeTime;
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateRestaurantDTO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateRestaurantDTO.java b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateRestaurantDTO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateRestaurantDTO.java	
@@ -0,0 +1,57 @@
+package com.leftovers.order.restaurant.restaurantDTO;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.validation.constraints.*;
+import java.sql.Time;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class UpdateRestaurantDTO {
+    @NotNull
+    @NotBlank(message = "Restaurant name is required")
+    public String name;
+
+    @NotNull
+    @NotBlank(message = "Zipcode is required")
+    @Pattern(regexp = "^\\d{5}(?:[-\\s]\\d{4})?$")
+    public String zipcode;
+
+    @NotNull
+    @NotBlank(message = "State is required")
+    public String state;
+
+    @NotNull
+    @NotBlank(message = "City is required")
+    public String city;
+
+    @NotNull
+    @NotBlank(message = "Country is required")
+    public String country;
+
+    @NotNull
+    @NotBlank(message = "Street Address is required")
+    public String streetAddress;
+
+    public String unitNumber;
+
+    @NotNull
+    @NotBlank(message = "Phone number is required")
+    @Pattern(regexp = "^\\d{10,15}$", message = "Phone number must be between 10 and 15 numbers")
+    public String phoneNo;
+
+    public String website;
+
+    @NotNull
+    @NotBlank(message = "Opening time is required")
+    public Time openTime;
+
+    @NotNull
+    @NotBlank(message = "Closing time is required")
+    public Time closeTime;
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateFoodDTO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateFoodDTO.java b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateFoodDTO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/UpdateFoodDTO.java	
@@ -0,0 +1,23 @@
+package com.leftovers.order.restaurant.restaurantDTO;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import javax.validation.constraints.*;
+import java.math.BigDecimal;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class UpdateFoodDTO {
+    @NotNull
+    @NotBlank(message = "Name is required")
+    public String name;
+
+    public String description;
+
+    @NotNull(message = "Price is required")
+    public BigDecimal price;
+}
Index: src/main/java/com/leftovers/order/restaurant/service/FoodServiceImpl.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/service/FoodServiceImpl.java b/src/main/java/com/leftovers/order/restaurant/service/FoodServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/service/FoodServiceImpl.java	
@@ -0,0 +1,90 @@
+package com.leftovers.order.restaurant.service;
+
+
+import com.leftovers.order.restaurant.restaurantDTO.CreateFoodDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateFoodDTO;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.restaurantDTO.CreateRestaurantDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateRestaurantDTO;
+import com.leftovers.order.restaurant.exception.NoSuchFoodException;
+import com.leftovers.order.restaurant.exception.NoSuchRestaurantException;
+import com.leftovers.order.restaurant.model.Address;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.model.Restaurant;
+import com.leftovers.order.restaurant.repository.AddressRepository;
+import com.leftovers.order.restaurant.repository.FoodRepository;
+import com.leftovers.order.restaurant.repository.RestaurantRepository;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class FoodServiceImpl implements FoodService {
+    private final FoodRepository foodRepo;
+    private final RestaurantRepository restRepo;
+
+    @Override
+    public Food createNewFood(CreateFoodDTO dto) {
+        notNull(dto);
+        var restaurant = restRepo.findRestaurantById(dto.restaurantId);
+        if(restaurant.isEmpty())
+            throw new NoSuchRestaurantException(dto.restaurantId);
+
+        Food food = Food.builder()
+                .name(dto.name)
+                .description(dto.description)
+                .price(dto.price)
+                .restaurant(restaurant.get())
+                .build();
+
+        return foodRepo.save(food);
+    }
+
+    @Override
+    public List<Food> getAllFood() {
+        return foodRepo.findAll();
+    }
+
+    @Override
+    public Food getFood(Integer id) {
+        notNull(id);
+        return foodRepo.findFoodById(id)
+                .orElseThrow(() -> new NoSuchFoodException(id));
+    }
+
+    @Override
+    public Food updateFood(Integer id, UpdateFoodDTO dto) {
+        notNull(id, dto);
+        var result = foodRepo.findFoodById(id);
+        if(result.isEmpty())
+            throw new NoSuchFoodException(id);
+
+        Food food = result.get();
+        food.setName(dto.name);
+        food.setPrice(dto.price);
+        food.setDescription(dto.description);
+
+        return foodRepo.save(food);
+    }
+
+    @Override
+    public void deleteFood(Integer id) {
+        notNull(id);
+        if(!foodRepo.deleteFoodById(id))
+            throw new NoSuchFoodException(id);
+    }
+
+
+    // Utility function to determine if input was incorrectly null
+    private void notNull(Object... ids) {
+        for(var id: ids) {
+            if(id == null)
+                throw new IllegalArgumentException("Expected value but received null.");
+        }
+    }
+}
+
Index: src/main/java/com/leftovers/order/restaurant/service/FoodService.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/service/FoodService.java b/src/main/java/com/leftovers/order/restaurant/service/FoodService.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/service/FoodService.java	
@@ -0,0 +1,30 @@
+package com.leftovers.order.restaurant.service;
+
+
+import com.leftovers.order.restaurant.restaurantDTO.CreateFoodDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateFoodDTO;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.restaurantDTO.CreateRestaurantDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateRestaurantDTO;
+import com.leftovers.order.restaurant.exception.NoSuchFoodException;
+import com.leftovers.order.restaurant.exception.NoSuchRestaurantException;
+import com.leftovers.order.restaurant.model.Address;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.model.Restaurant;
+import com.leftovers.order.restaurant.repository.AddressRepository;
+import com.leftovers.order.restaurant.repository.FoodRepository;
+import com.leftovers.order.restaurant.repository.RestaurantRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+import java.util.List;
+
+public interface FoodService {
+    Food createNewFood(CreateFoodDTO dto);
+    List<Food> getAllFood();
+    Food getFood(Integer id);
+    Food updateFood(Integer id, UpdateFoodDTO dto);
+    void deleteFood(Integer id);
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/service/RestaurantServiceImpl.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/service/RestaurantServiceImpl.java b/src/main/java/com/leftovers/order/restaurant/service/RestaurantServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/service/RestaurantServiceImpl.java	
@@ -0,0 +1,113 @@
+package com.leftovers.order.restaurant.service;
+
+
+import com.leftovers.order.restaurant.restaurantDTO.CreateFoodDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateFoodDTO;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.restaurantDTO.CreateRestaurantDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateRestaurantDTO;
+import com.leftovers.order.restaurant.exception.NoSuchFoodException;
+import com.leftovers.order.restaurant.exception.NoSuchRestaurantException;
+import com.leftovers.order.restaurant.model.Address;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.model.Restaurant;
+import com.leftovers.order.restaurant.repository.AddressRepository;
+import com.leftovers.order.restaurant.repository.FoodRepository;
+import com.leftovers.order.restaurant.repository.RestaurantRepository;
+
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import java.util.*;
+
+
+@Service
+@RequiredArgsConstructor
+public class RestaurantServiceImpl implements RestaurantService {
+    private final RestaurantRepository restRepo;
+    private final AddressRepository addrRepo;
+
+    @Override
+    public Restaurant createNewRestaurant(CreateRestaurantDTO dto) {
+        notNull(dto);
+        var address = Address.builder()
+                .zipCode(dto.zipcode)
+                .state(dto.state)
+                //.country(dto.country)
+                .streetAddress(dto.streetAddress)
+                .unitNumber(dto.unitNumber)
+                .build();
+
+        var restaurant = Restaurant.builder()
+                .name(dto.name)
+                .phoneNo(dto.phoneNo)
+                .website(dto.website)
+                .openTime(dto.openTime)
+                .closeTime(dto.closeTime)
+                .address(address)
+                .build();
+
+        return restRepo.save(restaurant);
+    }
+
+    @Override
+    public List<Restaurant> getAllRestaurants() {
+        return restRepo.findAll();
+    }
+
+    @Override
+    public Restaurant getRestaurant(Integer id) {
+        notNull(id);
+        return restRepo.findRestaurantById(id)
+                .orElseThrow(() -> new NoSuchRestaurantException(id));
+    }
+
+    @Override
+    public Restaurant updateRestaurant(Integer id, UpdateRestaurantDTO dto) {
+        notNull(id, dto);
+        var result = restRepo.findRestaurantById(id);
+        if(result.isEmpty())
+            throw new NoSuchRestaurantException(id);
+
+        Restaurant restaurant = result.get();
+
+        restaurant.getAddress().setZipCode(dto.zipcode);
+        restaurant.getAddress().setState(dto.state);
+        restaurant.getAddress().setStreetAddress(dto.streetAddress);
+        restaurant.getAddress().setUnitNumber(dto.unitNumber);
+
+        addrRepo.save(restaurant.getAddress());
+
+        restaurant.setName(dto.name);
+        restaurant.setPhoneNo(dto.phoneNo);
+        restaurant.setWebsite(dto.website);
+        restaurant.setOpenTime(dto.openTime);
+        restaurant.setCloseTime(dto.closeTime);
+
+        return restRepo.save(restaurant);
+    }
+
+    @Override
+    public void deleteRestaurant(Integer id) {
+        notNull(id);
+        if(!restRepo.deleteRestaurantById(id))
+            throw new NoSuchRestaurantException(id);
+    }
+
+    @Override
+    public List<Food> getAllFoodByRestaurant(Integer id) {
+        notNull(id);
+        var restaurant = restRepo.findRestaurantById(id);
+        if(restaurant.isEmpty())
+            throw new NoSuchRestaurantException(id);
+        return restaurant.get().getMenuItems();
+    }
+
+    // Utility function to determine if input was incorrectly null
+    private void notNull(Object... ids) {
+        for(var id: ids) {
+            if(id == null)
+                throw new IllegalArgumentException("Expected value but received null.");
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/exception/NoSuchFoodException.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/exception/NoSuchFoodException.java b/src/main/java/com/leftovers/order/restaurant/exception/NoSuchFoodException.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/exception/NoSuchFoodException.java	
@@ -0,0 +1,18 @@
+package com.leftovers.order.restaurant.exception;
+
+
+import java.util.NoSuchElementException;
+import java.util.Optional;
+
+public class NoSuchFoodException extends NoSuchElementException {
+    private final Integer id;
+
+    public NoSuchFoodException(Integer id) {
+        super("No food found with id=" + id);
+        this.id = id;
+    }
+
+    public Optional<Integer> getFoodId() {
+        return Optional.ofNullable(id);
+    }
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/exception/ControllerExceptionHandler.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/exception/ControllerExceptionHandler.java b/src/main/java/com/leftovers/order/restaurant/exception/ControllerExceptionHandler.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/exception/ControllerExceptionHandler.java	
@@ -0,0 +1,32 @@
+package com.leftovers.order.restaurant.exception;
+
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.stream.Collectors;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.validation.FieldError;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+
+@Slf4j
+@RestControllerAdvice
+public class ControllerExceptionHandler {
+    @ResponseStatus(HttpStatus.NOT_FOUND)
+    @ExceptionHandler(NoSuchElementException.class)
+    public Map<String, Object> handleNoSuchElementExceptions(NoSuchElementException ex) {
+        log.error(ex.getMessage());
+        return response(ex.getMessage(), HttpStatus.NOT_FOUND);
+    }
+
+    private Map<String, Object> response(String errorMsg, HttpStatus status) {
+        var response = new HashMap<String, Object>();
+        response.put("error", errorMsg);
+        response.put("status", status.value());
+        return response;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/model/Food.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/model/Food.java b/src/main/java/com/leftovers/order/restaurant/model/Food.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/model/Food.java	
@@ -0,0 +1,77 @@
+package com.leftovers.order.restaurant.model;
+
+
+import lombok.*;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.*;
+import java.math.BigDecimal;
+
+@Entity
+@Getter
+@Setter
+@Builder
+@AllArgsConstructor
+@Table(name="tbl_food")
+public class Food {
+
+    @Id
+    @Column(name = "id" , nullable = false)
+    private Integer id;
+    @Column(name = "name")
+    private String name;
+
+    @Column(name = "price")
+    private BigDecimal price;
+
+    @Column(name = "description")
+    private String description;
+
+    @ManyToOne
+    @JoinColumn(name="restaurant_id")
+    private Restaurant restaurant;
+
+
+    public Food() {}
+
+    /*
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public float getPrice() {
+        return price;
+    }
+
+    public void setPrice(float price) {
+        this.price = price;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public Restaurant getRestaurant() { return restaurant; }
+
+    public void setRestaurant(Restaurant restaurant) { this.restaurant = restaurant; }
+
+     */
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/controller/FoodController.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/controller/FoodController.java b/src/main/java/com/leftovers/order/restaurant/controller/FoodController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/controller/FoodController.java	
@@ -0,0 +1,72 @@
+package com.leftovers.order.restaurant.controller;
+
+
+
+import com.leftovers.order.restaurant.restaurantDTO.CreateFoodDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateFoodDTO;
+import com.leftovers.order.restaurant.restaurantDTO.UpdateRestaurantDTO;
+import com.leftovers.order.restaurant.model.Food;
+import com.leftovers.order.restaurant.model.Restaurant;
+import com.leftovers.order.restaurant.service.FoodService;
+import com.leftovers.order.restaurant.service.RestaurantService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.net.URI;
+import java.util.List;
+import java.util.Optional;
+
+@Slf4j
+@RestController
+@RequestMapping(path = "/food")
+@RequiredArgsConstructor
+public class FoodController {
+    private static final String MAPPING = "/food";
+    private final FoodService service;
+
+
+    @RequestMapping(path = "", method = RequestMethod.POST,
+            consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
+    public ResponseEntity<Food> createFood(@Valid @RequestBody CreateFoodDTO dto) {
+        log.info("POST Food");
+        var food = service.createNewFood(dto);
+        var uri = URI.create(MAPPING + "/" + food.getId());
+        return  ResponseEntity.created(uri).body(food);
+    }
+
+    @RequestMapping(path = "", method = RequestMethod.GET,
+            produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
+    public ResponseEntity<List<Food>> getAllFood() {
+        log.info("GET Food");
+        var food = service.getAllFood();
+        if(food.isEmpty())
+            return ResponseEntity.noContent().build();
+        return ResponseEntity.ok(food);
+    }
+
+    @RequestMapping(path = "/{id}", method = RequestMethod.GET,
+            produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
+    public ResponseEntity<Food> getFoodById(@PathVariable Integer id) {
+        log.info("GET Food " + id);
+        return ResponseEntity.of(Optional.ofNullable(service.getFood(id)));
+    }
+
+    @RequestMapping(path = "/{id}", method = RequestMethod.PUT,
+            consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
+    public ResponseEntity<Food> updateFood(@PathVariable Integer id, @Valid @RequestBody UpdateFoodDTO dto) {
+        log.info("PUT Restaurant " + id);
+        return ResponseEntity.of(Optional.ofNullable(service.updateFood(id, dto)));
+    }
+
+    @RequestMapping(path = "/{id}", method = RequestMethod.DELETE)
+    public ResponseEntity<String> deleteFood(@PathVariable Integer id) {
+        log.info("DELETE Food " + id);
+        service.deleteFood(id);
+        return ResponseEntity.noContent().build();
+    }
+}
+
Index: src/main/java/com/leftovers/order/restaurant/exception/NoSuchRestaurantException.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/exception/NoSuchRestaurantException.java b/src/main/java/com/leftovers/order/restaurant/exception/NoSuchRestaurantException.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/exception/NoSuchRestaurantException.java	
@@ -0,0 +1,18 @@
+package com.leftovers.order.restaurant.exception;
+
+
+import java.util.NoSuchElementException;
+import java.util.Optional;
+
+public class NoSuchRestaurantException extends NoSuchElementException {
+    private final Integer id;
+
+    public NoSuchRestaurantException(Integer id) {
+        super("No restaurant found with id=" + id);
+        this.id = id;
+    }
+
+    public Optional<Integer> getFoodId() {
+        return Optional.ofNullable(id);
+    }
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/repository/AddressRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/repository/AddressRepository.java b/src/main/java/com/leftovers/order/restaurant/repository/AddressRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/repository/AddressRepository.java	
@@ -0,0 +1,9 @@
+package com.leftovers.order.restaurant.repository;
+
+
+import com.leftovers.order.restaurant.model.Address;
+import org.springframework.data.repository.CrudRepository;
+
+public interface AddressRepository extends CrudRepository<Address, Integer> {
+    //Address findAddressById(Integer id);
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/model/Address.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/model/Address.java b/src/main/java/com/leftovers/order/restaurant/model/Address.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/model/Address.java	
@@ -0,0 +1,46 @@
+package com.leftovers.order.restaurant.model;
+
+import lombok.*;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Getter
+@Setter
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Table(name = "tbl_address")
+public class Address {
+
+    @Id
+    @Column(name = "id", nullable = false)
+    private Integer id;
+
+    @Column(name = "latitude", nullable = false)
+    private Double latitude;
+
+    @Column(name = "longitude", nullable = false)
+    private Double longitude;
+
+    @Column(name = "zip_code", nullable = false)
+    private String zipCode;
+
+    @Column(name = "country", nullable = false)
+    private String country;
+
+    @Column(name = "city", nullable = false)
+    private String city;
+
+    @Column(name = "state", nullable = false)
+    private String state;
+
+    @Column(name = "street_address", nullable = false)
+    private String streetAddress;
+
+    @Column(name = "unit_number", length = 5)
+    private String unitNumber;
+
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/repository/FoodRepository.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/repository/FoodRepository.java b/src/main/java/com/leftovers/order/restaurant/repository/FoodRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/repository/FoodRepository.java	
@@ -0,0 +1,14 @@
+package com.leftovers.order.restaurant.repository;
+
+import com.leftovers.order.restaurant.model.Food;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.List;
+import java.util.Optional;
+
+public interface FoodRepository extends CrudRepository<Food, Integer> {
+    Optional<Food> findFoodById(Integer id);
+    List<Food> findAll();
+    List<Food> findFoodByNameContainingIgnoreCase(String str);
+    boolean deleteFoodById(Integer id);
+}
\ No newline at end of file
Index: src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateFoodDTO.java
===================================================================
diff --git a/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateFoodDTO.java b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateFoodDTO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/leftovers/order/restaurant/restaurantDTO/CreateFoodDTO.java	
@@ -0,0 +1,20 @@
+package com.leftovers.order.restaurant.restaurantDTO;
+
+
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotNull;
+import java.math.BigDecimal;
+
+public class CreateFoodDTO {
+    @NotNull
+    @NotBlank(message = "Name is required")
+    public String name;
+
+    public String description;
+
+    @NotNull(message = "Price is required")
+    public BigDecimal price;
+
+    @NotNull(message = "Associated restaurant id is required")
+    public Integer restaurantId;
+}
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -25,6 +25,10 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-web</artifactId>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
 
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
@@ -43,6 +47,18 @@
 			<artifactId>hibernate-entitymanager</artifactId>
 		</dependency>
 
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>4.13.2</version>
+			<scope>test</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
 	</dependencies>
 
 	<build>
Index: src/main/java/com/leftovers/order/order/dao/orderDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/leftovers/order/order/dao/orderDAO.java b/src/main/java/com/leftovers/order/order/dao/orderDAO.java
--- a/src/main/java/com/leftovers/order/order/dao/orderDAO.java	
+++ b/src/main/java/com/leftovers/order/order/dao/orderDAO.java	
@@ -1,5 +1,5 @@
 package com.leftovers.order.order.dao;
-
+/*
 
 import com.leftovers.order.order.model.order;
 import com.leftovers.order.order.repository.orderRepository;
@@ -201,4 +201,6 @@
     }
 
 
-}
\ No newline at end of file
+}
+
+ */
\ No newline at end of file
Index: src/main/java/com/leftovers/order/order/repository/orderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/leftovers/order/order/repository/orderRepository.java b/src/main/java/com/leftovers/order/order/repository/orderRepository.java
--- a/src/main/java/com/leftovers/order/order/repository/orderRepository.java	
+++ b/src/main/java/com/leftovers/order/order/repository/orderRepository.java	
@@ -1,5 +1,5 @@
 package com.leftovers.order.order.repository;
-
+/*
 import com.leftovers.order.order.model.order;
 import org.springframework.data.repository.CrudRepository;
 
@@ -46,6 +46,8 @@
                 }
                 return true;
         }
+/*
+
 
         /*
         default public order updateDriverId(int oId, int dId)
@@ -78,4 +80,7 @@
                 newOrder.setTotalPrice(price);
                 return newOrder;
         }*/
-}
\ No newline at end of file
+    /*
+}
+
+*/
\ No newline at end of file
Index: src/main/java/com/leftovers/order/order/controller/orderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/leftovers/order/order/controller/orderController.java b/src/main/java/com/leftovers/order/order/controller/orderController.java
--- a/src/main/java/com/leftovers/order/order/controller/orderController.java	
+++ b/src/main/java/com/leftovers/order/order/controller/orderController.java	
@@ -1,6 +1,6 @@
 package com.leftovers.order.order.controller;
 
-
+/*
 import com.leftovers.order.order.model.order;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
@@ -16,12 +16,6 @@
     @Autowired
     com.leftovers.order.order.service.orderService orderService;
 
-/*
-    @RequestMapping
-    public String IsItWorking() {
-        return "Order is working!";
-    }
-*/
     @GetMapping(path = "/multi/{str1}/{str2}")
     public String multitest(@PathVariable String str1, @PathVariable String str2)
     {
@@ -113,6 +107,17 @@
         }
         return "An Error Occurred";
     }
+
+    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
+    public Optional<order> getOrderById(@PathVariable Integer id) {
+        return orderService.getOrderById(id);
+    }
+   */
+
+
+
+
+
     /*
     @RequestMapping(path = "/add/{name}" , method = RequestMethod.POST)
     public String addOrder(@RequestParam order newOrder) {
@@ -122,17 +127,13 @@
             return "Item Added Succesfully";
         }
         return "An Error Occured";
-    }*/
-
-    @RequestMapping(path = "/by-id/{id}" , method = RequestMethod.GET)
-    public Optional<order> getOrderById(@PathVariable Integer id) {
-        return orderService.getOrderById(id);
     }
-    /*
+
+
+
     public String getOrderById(@PathVariable Integer id) {
         return orderService.getOrderById(id).get().toString();
     }
-/*
     @RequestMapping(path = "/{name}" , method = RequestMethod.GET)
     public List<order> getFoodByName(@PathVariable String name) {
         return orderService.getOrderByName(name);
@@ -148,11 +149,15 @@
         }
     }
 
-    end minimalizing commenting/*
+    end minimalizing commenting
+
+
+
 
 
-    /*      orders don't have prices
-    @PutMapping(path = "/update-price/{id}")
+    orders don't have prices
+
+      @PutMapping(path = "/update-price/{id}")
     public String updateFoodPricce(@PathVariable Integer id , @RequestParam float price ) {
         if (orderService.updateFoodPrice(id , price)) {
             return "Updated Successfully";
@@ -161,9 +166,11 @@
             return "and error occured";
         }
     }
-*/
+
 
-    /*  orders don't have descriptions
+
+
+  orders don't have descriptions
     @PutMapping(path = "/update-description/{id}")
     public String updateFoodDescription(@PathVariable Integer id , @RequestParam String description ) {
         if (foodService.updateFoodDescription(id , description)) {
@@ -173,9 +180,10 @@
             return "and error occured";
         }
     }
-*/
+
 
-    /*  orders don't have restaurants
+
+  orders don't have restaurants
     @PutMapping(path = "/update-restaurant/{id}")
     public String updateFoodRestaurant(@PathVariable Integer id , @RequestParam Integer restaurantId ) {
         if (foodService.updateFoodRestaurant(id , restaurantId)) {
@@ -185,11 +193,22 @@
             return "and error occured";
         }
     }
-*/
+
 
-/*
+
     @DeleteMapping(path = "/delete")
     public String deleteByid(@RequestParam Integer id) {
         return "del success";
-    }*/
+    }
+
+
+    @RequestMapping
+    public String IsItWorking() {
+        return "Order is working!";
+    }
+*/
+
+/*
 }
+
+ */
